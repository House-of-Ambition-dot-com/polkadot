pub struct Ooooh<Ctx, Sub0, Sub1> {
	sub0: Sub0,
	yyy: Sub1,
	spawner: S,
	metrics: Metrics,
}

impl<Ctx, Sub0, Sub1> Ooooh<Ctx, Sub0, Sub1>
where
	Sub0: Subsystem<Ctx>,
	Sub1: Subsystem<Ctx>,
{
	fn builder() -> OooohBuilder {
		OooohBuilder::default()
	}
}

struct OooohBuilder<Ctx, Sub0, Sub1> {
	sub0: ::std::option::Option<Sub0>,
	yyy: ::std::option::Option<Sub1>,
	spawner: ::std::option::Option<spawner>,
	metrics: ::std::option::Option<metrics>,
}

impl<Ctx, Sub0, Sub1> OooohBuilder<Ctx, Sub0, Sub1>
where
	Sub0: Subsystem<Ctx>,
	Sub1: Subsystem<Ctx>,
{
	fn sub0(mut self, new: Sub0) -> OooohBuilder {
		self.sub0 = Some(new);
		self
	}
	fn yyy(mut self, new: Sub1) -> OooohBuilder {
		self.yyy = Some(new);
		self
	}
	fn build(mut self, ctx: Ctx) -> Ooooh<Ctx, Sub0, Sub1> {
		Ooooh::<Ctx, Sub0, Sub1> {
			sub0: self.sub0.unwrap(),
			yyy: self.yyy.unwrap(),
			spawner: self.spawner.unwrap(),
			metrics: self.metrics.unwrap(),
		}
	}
}

impl<Ctx: SubsystemContext, Sub0, Sub1> Ooooh<Ctx: SubsystemContext, Sub0, Sub1>
where
	Sub0: Subsystem<Ctx>,
	Sub1: Subsystem<Ctx>,
{
	#[doc = "Generated by #[overlord] derive proc-macro."]
	pub fn replace_sub0<NEW>(self, replacement: NEW) -> Ooooh<Ctx, NEW, Sub1>
	where
		NEW: Subsystem<Ctx>,
	{
		Ooooh::<Ctx, NEW, Sub1> {
			sub0: replacement,
			yyy: self.yyy,
			spawner:
			self.spawner,
			metrics: self.metrics
		}
	}
}

impl<Ctx: SubsystemContext, Sub0, Sub1> Ooooh<Ctx: SubsystemContext, Sub0, Sub1>
where
	Sub0: Subsystem<Ctx>,
	Sub1: Subsystem<Ctx>,
{
	#[doc = "Generated by #[overlord] derive proc-macro."]
	pub fn replace_yyy<NEW>(self, replacement: NEW) -> Ooooh<Ctx, Sub0, NEW>
	where
		NEW: Subsystem<Ctx>,
	{
		Ooooh::<Ctx, Sub0, NEW> { yyy: replacement, sub0: self.sub0, spawner: self.spawner, metrics: self.metrics }
	}
}
